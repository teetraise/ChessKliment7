using System;
using System.Net;
using System.Net.Sockets;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ChessClient
{
    // –¢–µ –∂–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    public class ChessMove
    {
        public string SessionId { get; set; } = "";
        public string From { get; set; } = "";
        public string To { get; set; } = "";
        public string Piece { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    public class AvatarPosition
    {
        public string SessionId { get; set; } = "";
        public float X { get; set; }
        public float Y { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class ChatMessage
    {
        public string SessionId { get; set; } = "";
        public string PlayerName { get; set; } = "";
        public string Message { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    public class ChessClient
    {
        private string _sessionId = "";
        private string _playerName = "";
        private readonly List<(string host, int tcpPort, int udpPort, int wsPort)> _servers = new();
        private int _currentServerIndex = -1;
        
        private TcpClient? _tcpClient;
        private UdpClient? _udpClient;
        private UdpClient? _udpReceiver;
        private ClientWebSocket? _webSocket;
        
        private bool _isConnected = false;
        private readonly List<string> _eventHistory = new();

        public async Task StartAsync()
        {
            Console.WriteLine("‚ôüÔ∏è  –®–∞—Ö–º–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç v1.0 (macOS)");
            Console.WriteLine("==================================");

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
            _sessionId = Guid.NewGuid().ToString("N")[..8];
            
            Console.Write("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ");
            _playerName = Console.ReadLine() ?? "–ò–≥—Ä–æ–∫";

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            AddDefaultServers();

            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("\nüìã –ú–µ–Ω—é:");
                Console.WriteLine("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤");
                Console.WriteLine("2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä");
                Console.WriteLine("3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
                Console.WriteLine("4. –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
                Console.WriteLine("5. –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥");
                Console.WriteLine("6. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç");
                Console.WriteLine("7. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∞–≤–∞—Ç–∞—Ä");
                Console.WriteLine("8. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π");
                Console.WriteLine("0. –í—ã–π—Ç–∏");
                
                Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
                string? choice = Console.ReadLine();

                try
                {
                    switch (choice)
                    {
                        case "1":
                            ShowServers();
                            break;
                        case "2":
                            AddServer();
                            break;
                        case "3":
                            await ConnectToServerAsync();
                            break;
                        case "4":
                            await DisconnectAsync();
                            break;
                        case "5":
                            await MakeMoveAsync();
                            break;
                        case "6":
                            await SendChatMessageAsync();
                            break;
                        case "7":
                            await MoveAvatarAsync();
                            break;
                        case "8":
                            ShowEventHistory();
                            break;
                        case "0":
                            exit = true;
                            break;
                        default:
                            Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                }
            }

            await DisconnectAsync();
            Console.WriteLine("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
        }

        private void AddDefaultServers()
        {
            _servers.Add(("localhost", 8080, 8081, 8082));
            _servers.Add(("127.0.0.1", 8080, 8081, 8082));
        }

        private void ShowServers()
        {
            Console.WriteLine("\nüåê –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:");
            for (int i = 0; i < _servers.Count; i++)
            {
                var server = _servers[i];
                string status = _currentServerIndex == i ? " [–ü–û–î–ö–õ–Æ–ß–ï–ù]" : "";
                Console.WriteLine($"{i + 1}. {server.host}:{server.tcpPort}{status}");
            }
        }

        private void AddServer()
        {
            Console.Write("üåê –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: ");
            string? host = Console.ReadLine();
            
            Console.Write("üîå –í–≤–µ–¥–∏—Ç–µ TCP –ø–æ—Ä—Ç: ");
            if (int.TryParse(Console.ReadLine(), out int tcpPort))
            {
                Console.Write("üì° –í–≤–µ–¥–∏—Ç–µ UDP –ø–æ—Ä—Ç: ");
                if (int.TryParse(Console.ReadLine(), out int udpPort))
                {
                    Console.Write("üåê –í–≤–µ–¥–∏—Ç–µ WebSocket –ø–æ—Ä—Ç: ");
                    if (int.TryParse(Console.ReadLine(), out int wsPort))
                    {
                        _servers.Add((host ?? "localhost", tcpPort, udpPort, wsPort));
                        Console.WriteLine("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!");
                    }
                    else
                    {
                        Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π WebSocket –ø–æ—Ä—Ç!");
                    }
                }
                else
                {
                    Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π UDP –ø–æ—Ä—Ç!");
                }
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π TCP –ø–æ—Ä—Ç!");
            }
        }

        private async Task ConnectToServerAsync()
        {
            if (_isConnected)
            {
                Console.WriteLine("‚ö†Ô∏è  –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É!");
                return;
            }

            ShowServers();
            Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ");
            
            if (int.TryParse(Console.ReadLine(), out int serverIndex) && 
                serverIndex >= 1 && serverIndex <= _servers.Count)
            {
                var server = _servers[serverIndex - 1];
                _currentServerIndex = serverIndex - 1;
                
                Console.WriteLine($"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {server.host}...");

                // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TCP –¥–ª—è —Ö–æ–¥–æ–≤
                await ConnectTcpAsync(server.host, server.tcpPort);
                
                // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ UDP –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –∞–≤–∞—Ç–∞—Ä–æ–≤
                ConnectUdp(server.host, server.udpPort);
                
                // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è —á–∞—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–π
                await ConnectWebSocketAsync(server.host, server.wsPort);

                _isConnected = true;
                Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                _ = Task.Run(ListenTcpAsync);
                _ = Task.Run(ListenUdpAsync);
                _ = Task.Run(ListenWebSocketAsync);
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞!");
            }
        }

        private async Task ConnectTcpAsync(string host, int port)
        {
            _tcpClient = new TcpClient();
            await _tcpClient.ConnectAsync(host, port);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            string registerMessage = $"REGISTER:{_sessionId}|{_playerName}\n";
            byte[] data = Encoding.UTF8.GetBytes(registerMessage);
            await _tcpClient.GetStream().WriteAsync(data, 0, data.Length);
            
            Console.WriteLine("üîó TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        }

        private void ConnectUdp(string host, int port)
        {
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è macOS
            _udpClient = new UdpClient();
            _udpClient.Connect(host, port); // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            
            // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π UDP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            try
            {
                _udpReceiver = new UdpClient(port + 1000); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞
            }
            catch (SocketException)
            {
                // –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
                _udpReceiver = new UdpClient(port + 1001);
            }
            
            Console.WriteLine("üì° UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        }

        private async Task ConnectWebSocketAsync(string host, int port)
        {
            _webSocket = new ClientWebSocket();
            var uri = new Uri($"ws://{host}:{port}/?sessionId={_sessionId}");
            await _webSocket.ConnectAsync(uri, CancellationToken.None);
            
            Console.WriteLine("üåê WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        }

        private async Task ListenTcpAsync()
        {
            if (_tcpClient?.GetStream() == null) return;

            byte[] buffer = new byte[1024];
            var stream = _tcpClient.GetStream();

            try
            {
                while (_isConnected && _tcpClient.Connected)
                {
                    int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                    if (bytesRead == 0) break;

                    string response = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"üì© TCP: {response}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ TCP –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        private async Task ListenUdpAsync()
        {
            if (_udpReceiver == null) return;

            try
            {
                while (_isConnected)
                {
                    var result = await _udpReceiver.ReceiveAsync();
                    string message = Encoding.UTF8.GetString(result.Buffer);
                    
                    if (message.StartsWith("POSITION:"))
                    {
                        var positionData = message.Substring(9);
                        var position = JsonSerializer.Deserialize<AvatarPosition>(positionData);
                        
                        if (position != null && position.SessionId != _sessionId)
                        {
                            Console.WriteLine($"üë§ –ü–æ–∑–∏—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞: ({position.X:F1}, {position.Y:F1})");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ UDP –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        private async Task ListenWebSocketAsync()
        {
            if (_webSocket == null) return;

            byte[] buffer = new byte[1024];

            try
            {
                while (_isConnected && _webSocket.State == WebSocketState.Open)
                {
                    var result = await _webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    
                    if (result.MessageType == WebSocketMessageType.Close)
                    {
                        break;
                    }
                    else if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        await ProcessWebSocketMessage(message);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        private async Task ProcessWebSocketMessage(string message)
        {
            try
            {
                var data = JsonSerializer.Deserialize<JsonElement>(message);
                
                if (data.TryGetProperty("type", out var typeElement))
                {
                    string type = typeElement.GetString() ?? "";
                    
                    switch (type)
                    {
                        case "move":
                            if (data.TryGetProperty("player", out var playerElement) &&
                                data.TryGetProperty("move", out var moveElement))
                            {
                                var player = playerElement.GetString();
                                var move = JsonSerializer.Deserialize<ChessMove>(moveElement.GetRawText());
                                Console.WriteLine($"‚ôüÔ∏è  {player} —Å–¥–µ–ª–∞–ª —Ö–æ–¥: {move?.From} ‚Üí {move?.To} ({move?.Piece})");
                            }
                            break;
                            
                        case "chat":
                            if (data.TryGetProperty("player", out var chatPlayerElement) &&
                                data.TryGetProperty("message", out var chatMessageElement))
                            {
                                var player = chatPlayerElement.GetString();
                                var chatMsg = chatMessageElement.GetString();
                                Console.WriteLine($"üí¨ {player}: {chatMsg}");
                            }
                            break;
                            
                        case "event":
                            if (data.TryGetProperty("message", out var eventMessageElement))
                            {
                                var eventMsg = eventMessageElement.GetString();
                                Console.WriteLine($"üéÆ –°–û–ë–´–¢–ò–ï: {eventMsg}");
                                _eventHistory.Add($"{DateTime.Now:HH:mm:ss} - {eventMsg}");
                            }
                            break;
                    }
                }
                else
                {
                    // –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    Console.WriteLine($"üåê {message}");
                }
                
                await Task.CompletedTask; // –£–±–∏—Ä–∞–µ–º warning
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                Console.WriteLine($"üåê {message}"); // –í—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
            }
        }

        private async Task DisconnectAsync()
        {
            if (!_isConnected) return;

            _isConnected = false;
            _currentServerIndex = -1;

            try
            {
                _tcpClient?.Close();
                _udpClient?.Close();
                _udpReceiver?.Close();
                
                if (_webSocket?.State == WebSocketState.Open)
                {
                    await _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Disconnecting", CancellationToken.None);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {ex.Message}");
            }

            Console.WriteLine("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        private async Task MakeMoveAsync()
        {
            if (!_isConnected || _tcpClient?.Connected != true)
            {
                Console.WriteLine("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
                return;
            }

            Console.WriteLine("‚ôüÔ∏è  –í–≤–µ–¥–∏—Ç–µ —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:");
            Console.WriteLine("   –û—Ç–∫—É–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: e2): ");
            string? from = Console.ReadLine()?.ToLower();
            
            Console.WriteLine("   –ö—É–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: e4): ");
            string? to = Console.ReadLine()?.ToLower();
            
            Console.WriteLine("   –§–∏–≥—É—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–µ—à–∫–∞): ");
            string? piece = Console.ReadLine();

            if (string.IsNullOrEmpty(from) || string.IsNullOrEmpty(to) || string.IsNullOrEmpty(piece))
            {
                Console.WriteLine("‚ùå –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
                return;
            }

            var move = new ChessMove
            {
                SessionId = _sessionId,
                From = from,
                To = to,
                Piece = piece,
                Timestamp = DateTime.Now
            };

            string moveJson = JsonSerializer.Serialize(move);
            string message = $"MOVE:{moveJson}\n";
            
            byte[] data = Encoding.UTF8.GetBytes(message);
            await _tcpClient.GetStream().WriteAsync(data, 0, data.Length);
            
            Console.WriteLine($"‚úÖ –•–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {from} ‚Üí {to}");
        }

        private async Task SendChatMessageAsync()
        {
            if (!_isConnected || _webSocket?.State != WebSocketState.Open)
            {
                Console.WriteLine("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
                return;
            }

            Console.Write("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ");
            string? message = Console.ReadLine();

            if (string.IsNullOrEmpty(message))
            {
                Console.WriteLine("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
                return;
            }

            var chatMessage = new ChatMessage
            {
                SessionId = _sessionId,
                Message = message,
                Timestamp = DateTime.Now
            };

            string chatJson = JsonSerializer.Serialize(chatMessage);
            string wsMessage = $"CHAT:{chatJson}";
            
            byte[] data = Encoding.UTF8.GetBytes(wsMessage);
            await _webSocket.SendAsync(new ArraySegment<byte>(data), WebSocketMessageType.Text, true, CancellationToken.None);
            
            Console.WriteLine("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        }

        private async Task MoveAvatarAsync()
        {
            if (!_isConnected || _udpClient == null)
            {
                Console.WriteLine("‚ùå UDP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
                return;
            }

            Console.Write("üë§ –í–≤–µ–¥–∏—Ç–µ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (0-7): ");
            if (!float.TryParse(Console.ReadLine(), out float x) || x < 0 || x > 7)
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞!");
                return;
            }

            Console.Write("üë§ –í–≤–µ–¥–∏—Ç–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (0-7): ");
            if (!float.TryParse(Console.ReadLine(), out float y) || y < 0 || y > 7)
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞!");
                return;
            }

            var position = new AvatarPosition
            {
                SessionId = _sessionId,
                X = x,
                Y = y,
                Timestamp = DateTime.Now
            };

            string positionJson = JsonSerializer.Serialize(position);
            string message = $"AVATAR:{positionJson}";
            
            byte[] data = Encoding.UTF8.GetBytes(message);
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è macOS
            try
            {
                var result = await _udpClient.SendAsync(data, data.Length);
                Console.WriteLine($"‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ({x}, {y})");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: {ex.Message}");
            }
        }

        private void ShowEventHistory()
        {
            Console.WriteLine("\nüìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π:");
            if (_eventHistory.Count == 0)
            {
                Console.WriteLine("   (–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π)");
            }
            else
            {
                foreach (var eventMsg in _eventHistory.TakeLast(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
                {
                    Console.WriteLine($"   {eventMsg}");
                }
            }
        }
    }

    class Program
    {
        static async Task Main(string[] args)
        {
            var client = new ChessClient();
            await client.StartAsync();
        }
    }
}